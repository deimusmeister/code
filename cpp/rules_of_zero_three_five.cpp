#include <iostream>
#include <string>
#include <vector>
#include <memory>

/**
 * Compiler generated default operations are 
 * 
 * Since C++98
 * - Default constructor
 * - Copy constructor
 * - Copy assingment operator
 * - Destructor
 * 
 * Since C++11, additionally
 * - Move contructor
 * - Move assignment operator
 */

// **Rule of zero**
// Rule - If you can avoid defining default operations, do so
// Reason - It's the simplest and gives the cleanest semantics.
class RuleOfZero {
public:
    void print_info() {
        std::cout << "RulesOfZero: " << info << std::endl;
    }
private:
    std::string info{"default value"};
};

// **Rule of three**
// Rule - If a class requires user defined dtor or copy ctor,
//        or copy assignment operator, then it most certainly
//        requires all three
// Reason - Because C++ copies, copy assigns of user defined 
//          types in varios situations e.g. passing, returning
//          by value, etc. those special operations will be 
//          called. And if they are not defined by user they 
//          will be generated by compiler
class RuleOfThree {
public:
    ~RuleOfThree() {
        std::cout << "RuleOfThree: dtor" << std::endl;
    }

    // Compiler will not implicitely generate default ctor
    // as we declare user defined copy ctor
    RuleOfThree() = default; 

    RuleOfThree(const RuleOfThree& rhs) {
        std::cout << "RuleOfThree copy ctor " << rhs.info << std::endl;
    }
    const RuleOfThree& operator=(const RuleOfThree& rhs) {
        std::cout << "RuleOfThree copy assignment " << rhs.info << std::endl;
        return *this;
    }
private:
    std::string info{"default value"};
};

// **Rules of five**
// Rule - As user defined dtor or copy ctor or copy assignment
//        operator will be prevent generation of move ctor or 
//        move assignemtn operator, then most probably user need 
//        to define all five togheter
// Reason - The classes which are interested in move semantics,
//          need to define all five.
class RuleOfFive {
public:
    ~RuleOfFive() {
        std::cout << "RuleOfFive: dtor" << std::endl;
    }
    RuleOfFive() = default;
    RuleOfFive(const RuleOfFive& rhs) {
        std::cout << "RuleOfFive copy ctor " << rhs.info << std::endl;
    }
    RuleOfFive(RuleOfFive&& rhs) {
        std::cout << "RuleOfFive move ctor " << rhs.info << std::endl;
    }
    const RuleOfFive& operator=(const RuleOfFive& rhs) {
        std::cout << "RuleOfFive copy assignment " << rhs.info << std::endl;
        return *this;
    }
    const RuleOfFive& operator=(RuleOfFive&& rhs) {
        std::cout << "RuleOfFive move assignment " << rhs.info << std::endl;
        return *this;
    }
private:
    std::string info{"default value"};
};
int main() {
    {
        RuleOfZero zero;
        zero.print_info();
    }
    std::cout << "------------" << std::endl;

    {
        RuleOfThree three;
        std::vector<RuleOfThree> v;
        v.push_back(three);
    }
    std::cout << "------------" << std::endl;

    {
        RuleOfFive five;
        std::vector<RuleOfFive> v;
        v.push_back(std::move(five));
    }
    std::cout << "------------" << std::endl;

    return 0;
}
